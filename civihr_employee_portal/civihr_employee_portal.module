<?php

use Drupal\civihr_employee_portal\Blocks\Base;
use Drupal\civihr_employee_portal\Blocks\Leave;
use Drupal\civihr_employee_portal\Helpers\HelperClass;

/**
 * Implements hook_css_alter().
 */
function civihr_employee_portal_css_alter(&$css) {

    // Remove defaults system messages css file.
    unset($css[drupal_get_path('module', 'system') . '/system.messages.css']);
}

/**
 * Implements hook_init().
 */
function civihr_employee_portal_init() {

    // @TODO -> init civi only on pages where we need to (e.g. Dashboard)
    // Civi init + load the singleton needed for the AJAX calls
    civicrm_initialize();
    CRM_Core_Resources::singleton()->addCoreResources();

    // Add our additional css libraries
    drupal_add_css(drupal_get_path('module', 'civihr_employee_portal') . "/css/custom.css");
    drupal_add_css(drupal_get_path('module', 'civihr_employee_portal') . "/lib/sweetalert/sweet-alert.css");
    drupal_add_css(drupal_get_path('module', 'civihr_employee_portal') . "/lib/tablesaw/tablesaw.css");
    drupal_add_css(drupal_get_path('module', 'civihr_employee_portal') . "/css/documents.css");

    // Check the variable and decide if we need to rebuild the absence_list mysql view
    $rebuild_absence_list_view = variable_get('rebuild_absence_list_view', 'TRUE');

    if (isset($rebuild_absence_list_view) && $rebuild_absence_list_view == 'TRUE') {

        try {

            // Civi init
            civicrm_initialize();

            $res = civicrm_api3('HRAbsenceType', 'get', array());
            $absenceTypes = $res['values'];

            // Build the option values based on Absence types
            $options = '';

            foreach ($absenceTypes as $absenceType) {

                if ($absenceType['allow_credits'] == '1') {

                    // Default credit types
                    $options .= $absenceType['credit_activity_type_id'] . ',';

                }

                if ($absenceType['allow_debits'] == '1') {

                    // Default debit types
                    $options .= $absenceType['debit_activity_type_id']. ',';

                }
            }

            // Activity target contact ID (3 types of activity contacts -> source, assignee, target)
            $activityContacts = CRM_Core_OptionGroup::values('activity_contacts', FALSE, FALSE, FALSE, NULL, 'name');
            $targetID = CRM_Utils_Array::key('Activity Targets', $activityContacts);
            $assigneeID = CRM_Utils_Array::key('Activity Assignees', $activityContacts);

            // Get the main "absence" activity ID
            $activityTypes = CRM_Core_OptionGroup::values('activity_type', FALSE, FALSE, FALSE, NULL, 'name');
            $activityTypeId = CRM_Utils_Array::key('Absence', $activityTypes);
            watchdog('Rebuild view TRUE', 'ABSENCE LIST MYSQL VIEW');
        }

        catch (CiviCRM_API3_Exception $e) {
            $error = $e->getMessage();
        }

        $civi_settings = parse_url(CIVICRM_DSN);
        $civi_db_name = trim($civi_settings['path'], '/');

        /**
         * Leave / sickness list view
         */
        $result = db_query('DROP view if exists absence_list');
        $result = db_query("CREATE VIEW absence_list AS
                            SELECT request.id, request.details, request.activity_type_id, absence_type_debit.title as debit_title, absence_type_credit.title as credit_title,
                                    IF(absence_type_debit.title IS NOT NULL, absence_type_debit.title, absence_type_credit.title) as absence_title,
                                CASE absence_type_credit.credit_activity_type_id
                                    WHEN request.activity_type_id THEN 1
                                    ELSE 0 END AS is_credit, tgt.contact_id, tgt.record_type_id, min(absence.activity_date_time) as absence_start_date, max(absence.activity_date_time) as absence_end_date, drupal_contact.uf_id as drupal_uid, sum(absence.duration) as duration, request.status_id as absence_status,
                            UNIX_TIMESTAMP(STR_TO_DATE(min(absence.activity_date_time), '%Y-%m-%d')) as absence_start_date_timestamp,
                            UNIX_TIMESTAMP(STR_TO_DATE(max(absence.activity_date_time), '%Y-%m-%d')) as absence_end_date_timestamp
                            FROM " . $civi_db_name . ".civicrm_activity request
                            INNER JOIN " . $civi_db_name . ".civicrm_activity absence ON (absence.source_record_id = request.id AND absence.activity_type_id = " . $activityTypeId . ")
                            INNER JOIN " . $civi_db_name . ".civicrm_activity_contact tgt ON tgt.activity_id = request.id AND tgt.record_type_id = " . $targetID . "
                            LEFT JOIN " . $civi_db_name . ".civicrm_hrabsence_type absence_type_debit
                            ON request.activity_type_id = absence_type_debit.debit_activity_type_id
                            LEFT JOIN " . $civi_db_name . ".civicrm_hrabsence_type absence_type_credit
                            ON request.activity_type_id = absence_type_credit.credit_activity_type_id
                            INNER JOIN " . $civi_db_name . ".civicrm_uf_match drupal_contact
                            ON tgt.contact_id = drupal_contact.contact_id
                            WHERE (request.activity_type_id IN (" . rtrim($options, ',') . "))
                            GROUP BY request.id");

        /**
         * Manager approval view
         */
        $result = db_query('DROP view if exists absence_approval_list');
        $result = db_query("CREATE VIEW absence_approval_list AS
                            SELECT request.id, request.activity_type_id, absence_type_debit.title as debit_title, absence_type_credit.title as credit_title,
                                    IF(absence_type_debit.title IS NOT NULL, absence_type_debit.title, absence_type_credit.title) as absence_title,
                                CASE absence_type_credit.credit_activity_type_id
                                    WHEN request.activity_type_id THEN 1
                                    ELSE 0 END AS is_credit, tgt.contact_id AS manager_id, tgt_contact.contact_id AS employee_id, tgt.record_type_id, min(absence.activity_date_time) as absence_start_date, max(absence.activity_date_time) as absence_end_date, drupal_contact.uf_id as drupal_uid, sum(absence.duration) as duration, request.status_id as absence_status,
                            UNIX_TIMESTAMP(STR_TO_DATE(min(absence.activity_date_time), '%Y-%m-%d')) as absence_start_date_timestamp,
                            UNIX_TIMESTAMP(STR_TO_DATE(max(absence.activity_date_time), '%Y-%m-%d')) as absence_end_date_timestamp
                            FROM " . $civi_db_name . ".civicrm_activity request
                            INNER JOIN " . $civi_db_name . ".civicrm_activity absence ON (absence.source_record_id = request.id AND absence.activity_type_id = " . $activityTypeId . ")
                            INNER JOIN " . $civi_db_name . ".civicrm_activity_contact tgt ON tgt.activity_id = request.id AND tgt.record_type_id = " . $assigneeID . "
                            INNER JOIN " . $civi_db_name . ".civicrm_activity_contact tgt_contact ON tgt_contact.activity_id = request.id AND tgt_contact.record_type_id = " . $targetID . "
                            LEFT JOIN " . $civi_db_name . ".civicrm_hrabsence_type absence_type_debit
                            ON request.activity_type_id = absence_type_debit.debit_activity_type_id
                            LEFT JOIN " . $civi_db_name . ".civicrm_hrabsence_type absence_type_credit
                            ON request.activity_type_id = absence_type_credit.credit_activity_type_id
                            INNER JOIN " . $civi_db_name . ".civicrm_uf_match drupal_contact
                            ON tgt.contact_id = drupal_contact.contact_id
                            WHERE (request.activity_type_id IN (" . rtrim($options, ',') . "))
                            GROUP BY request.id");


        // Set to false so it will not rebuild until not asked to rebuild
        variable_set('rebuild_absence_list_view', 'FALSE');
    }

}

/**
 * When caches are cleared rebuild the helper mysql views
 */
function civihr_employee_portal_flush_caches() {

    // If we running from drush
    // @ TODO -> add json file removal when we run from UI
    // @ TODO -> move the json cache to the private file folder
    // @ TODO -> get the sites/default/files location from proper drupal function
    if (drupal_is_cli()) {

        // Get the drupal root
        $drupal_root = drush_get_context('DRUSH_DRUPAL_ROOT');

        // Views Json Query directory for the cached files
        $folder_path = $drupal_root . '/sites/default/files/views_json_query/';

        // If we the views_json_query directory exists, check the cached files and remove them
        if (is_dir($folder_path)) {

            $dirHandle = opendir($folder_path);

            // Loop over all of the files in the folder
            while ($file = readdir($dirHandle)) {

                // If $file is NOT a directory remove it
                if (!is_dir($file)) {
                    unlink($folder_path . $file); // unlink() delete the file
                    drush_log($file . ' deleted');
                }
            }

            // Close the directory
            closedir($dirHandle);

        }
    }

    // Set variable to TRUE so the mysql database views will be refreshed
    variable_set('rebuild_absence_list_view', 'TRUE');
    watchdog('Rebuild view REQUEST', 'ABSENCE LIST MYSQL VIEW');

}

/**
 * Implements hook_permission().
 */
function civihr_employee_portal_permission() {
  return array(
    'access manager approval screen' => array(
      'title' => t('Access CiviHR manager approval screen'),
      'description' => t('Perfom manager approval related tasks for CiviHR.'),
    ),
  );
}

/**
 * Implements hook_theme().
 */
function civihr_employee_portal_theme() {
    return array(
        'user_login_block' => array(
            'render element' => 'form',
            'template' => 'templates/civihr-employee-portal-user-login',
            'preprocess functions' => array(
                'civihr_employee_portal_preprocess_user_login'
            ),
        ),
        'civihr_employee_portal_manager_calendar_block' => array(
            'variables' => array(
                'custom_data' => NULL
            ),
            'template' => 'templates/civihr-employee-portal-manager-calendar--block',
        ),
        'civihr_employee_portal_my_details_block' => array(
            'variables' => array(
                'profile_image' => NULL,
                'contact_details' => NULL,
                'address_data' => NULL
            ),
            'template' => 'templates/civihr-employee-portal-my-details--block',
        ),
        'civihr_employee_portal_login_block' => array(
            'variables' => array(
                'custom_data' => NULL
            ),
            'template' => 'templates/civihr-employee-portal-login-block--block',
        ),
        'civihr_employee_portal_print_leave_report' => array(
            'variables' => array(
                'custom_data' => NULL
            ),
            'template' => 'templates/civihr-employee-portal-print-leave-report',
        ),
        'civihr_employee_portal_document_form' => array(
            //'arguments' => array('form' => NULL),
            'variables' => array(
                'custom_data' => NULL
            ),
//            'template' => 'templates/civihr-employee-portal-document-form',
            'render element' => 'form',
        ),
    );
}

/**
 * Implements hook_views_default_views().
 */
function civihr_employee_portal_views_default_views() {

    // Get the absence types
    $absenceTypes = get_civihr_absence_types();

    // Check for all view files in views directory
    $files = file_scan_directory(drupal_get_path('module', 'civihr_employee_portal') . '/views/views_export', '/.*\.inc$/');

    // Add view to list of views
    foreach ($files as $filepath => $file) {
        require $filepath;

        // Check if the view object is set
        if (isset($view)) {
            $views[$view->name] = $view;
        }
    }

    // At the end, return array of default views.
    return $views;
}

/**
 * Function for caching date periods returned from CiviCRM (avoiding expensive DB calls for each dashboard page hit)
 */
function get_civihr_date_periods() {

    $periods_data = &drupal_static(__FUNCTION__);

    if (!isset($periods_data)) {
        if ($cache = cache_get('civihr_date_periods')) {
            $periods_data = $cache->data;
            watchdog('cache hit', 'cache');
        }
        else {

            try {

                // Civi init
                civicrm_initialize();

                $res = civicrm_api3('HRAbsencePeriod', 'get', array('options' => array('sort' => "start_date DESC")));
                $periods_data = $res['values'];
                watchdog('DB hit', 'DB');

            }

            catch (CiviCRM_API3_Exception $e) {
                $error = $e->getMessage();
            }

            // Cache the date periods for 5 minutes
            cache_set('civihr_date_periods', $periods_data, 'cache', time() + 360);
        }
    }

    return $periods_data;
}

/**
 * Function for caching absence types returned from CiviCRM (avoiding expensive DB calls for each dashboard page hit)
 */
function get_civihr_absence_types() {

    $absenceTypes = &drupal_static(__FUNCTION__);

    if (!isset($absenceTypes)) {

        if ($cache = cache_get('civihr_absence_types')) {
            $absenceTypes = $cache->data;
            watchdog('cache hit absence types', 'cache');
        }
        else {

            try {

                // Civi init
                civicrm_initialize();

                $res = civicrm_api3('HRAbsenceType', 'get', array());
                $absenceTypes = $res['values'];
                watchdog('DB hit absence types', 'DB');

            }

            catch (CiviCRM_API3_Exception $e) {
                $error = $e->getMessage();
            }

            // Cache the absence types for 5 minutes
            cache_set('civihr_absence_types', $absenceTypes, 'cache', time() + 360);

        }

    }

    return $absenceTypes;

}

/**
 * Function for caching absence statuses returned from CiviCRM (avoiding expensive DB calls for each dashboard page hit)
 */
function get_civihr_absence_statuses($status_id = NULL) {

    $absenceStatuses = &drupal_static(__FUNCTION__);

    if (!isset($absenceStatuses)) {

        if ($cache = cache_get('civihr_absence_statuses')) {
            $absenceStatuses = $cache->data;
            watchdog('cache hit absence statuses', 'cache');
        }
        else {

            try {

                // Civi init
                civicrm_initialize();

                // Activity absence statuses array
                $absenceStatuses = CRM_Core_OptionGroup::values('activity_status', FALSE, FALSE, FALSE, NULL, 'name');

                watchdog('DB hit absence statuses', 'DB');

            }

            catch (CiviCRM_API3_Exception $e) {
                $error = $e->getMessage();
            }

            // Cache the absence statuses for 5 minutes
            cache_set('civihr_absence_statuses', $absenceStatuses, 'cache', time() + 360);

        }

    }

    // Get the status values based on the status_id
    $status_id_value = CRM_Utils_Array::value($status_id, $absenceStatuses);

    // How we want to display the approved absences?
    if ($status_id_value == 'Completed') {
        $status_id_value = 'Approved';
    }
    if ($status_id_value == 'Scheduled') {
        $status_id_value = 'Awaiting approval';
    }

    return $status_id_value;

}

/**
 * Function for caching civicrm_uf_match table from CiviCRM
 */
function get_civihr_uf_match_data($user_id = NULL) {

    // Generate unique static callable / uf_match
    $contact_uf_match = &drupal_static(__FUNCTION__ . '_' . $user_id);

    if (!isset($contact_uf_match)) {
        if ($cache = cache_get('civihr_uf_match_data_' . $user_id)) {
            $contact_uf_match = $cache->data;
            watchdog('cache hit user uf_match data', print_r($user_id, TRUE));
        }
        else {

            try {

                // Civi init
                civicrm_initialize();

                $params = array(
                    'uf_id' => $user_id,
                    'version' => 3,
                    'sequential' => 1,
                );

                // Get the contact DATA from the passed user ID
                $res = civicrm_api3('UFMatch', 'Get', $params);
                $contact_uf_match = array_shift($res['values']);

                watchdog('DB hit user uf_match data', print_r($user_id, TRUE));

            }

            catch (CiviCRM_API3_Exception $e) {
                $error = $e->getMessage();
            }

            // Cache the contact data for 5 minutes
            cache_set('civihr_uf_match_data_' . $user_id, $contact_uf_match, 'cache', time() + 360);
        }
    }

    return $contact_uf_match;
}

/**
 * Function for caching contact data returned from CiviCRM
 */
function get_civihr_contact_data($contact_id = NULL, $user_id = '') {

    // If $user_id is passed get the contact ID and continue in the function
    if (isset($user_id) && $user_id != '') {

        // Get the contact ID based on the USER ID
        $contact_id = get_civihr_uf_match_data($user_id)['contact_id'];

    }

    // Generate unique static callable / contact
    $contact_data = &drupal_static(__FUNCTION__ . '_' . $contact_id);

    if (!isset($contact_data)) {
        if ($cache = cache_get('civihr_contact_data_' . $contact_id)) {
            $contact_data = $cache->data;
            watchdog('cache hit contact data', print_r($contact_id, TRUE));
        }
        else {

            try {

                // Civi init
                civicrm_initialize();

                $contact_data = civicrm_api('Contact', 'getsingle', array(
                    'version' => 3,
                    'return' => array('display_name', 'nick_name', 'image_URL', 'email', 'phone'),
                    'id' => $contact_id
                ));
                watchdog('DB hit contact data', print_r($contact_id, TRUE));

            }

            catch (CiviCRM_API3_Exception $e) {
                $error = $e->getMessage();
            }

            // Cache the contact data for 5 minutes
            cache_set('civihr_contact_data_' . $contact_id, $contact_data, 'cache', time() + 360);
        }
    }

    return $contact_data;
}

/**
 * Implementation of hook_menu()
 */
function civihr_employee_portal_menu() {
    $items = array();
    $items['absence_entitlement_json'] = array(
        'title' => 'Absence Entitlement',
        'page callback' => 'civihr_employee_portal_get_absence_entitlement',
        'access callback' => TRUE,
        'type' => MENU_CALLBACK,
    );

    $items['civihr_vacancies'] = array(
        'title' => 'Vacancy list',
        'page callback' => 'civihr_employee_portal_get_vacancy_list',
        'access callback' => TRUE,
        'type' => MENU_CALLBACK,
    );

    $items['civi_documents'] = array(
        'title' => 'Document list',
        'page callback' => 'civihr_employee_portal_get_document_list',
        'access callback' => TRUE,
        'type' => MENU_CALLBACK,
    );
    
    $items['civi_documents_manager'] = array(
        'title' => 'Document list',
        'page callback' => 'civihr_employee_portal_get_document_list_manager',
        'access callback' => TRUE,
        'type' => MENU_CALLBACK,
    );
    
    $items['civi_documents/%ctools_js/edit/%'] = array(
        'title' => 'Edit Document',
        'page callback' => 'civihr_employee_portal_edit_document',
        'page arguments' => array(1, 3),
        'access callback' => TRUE,
        'type' => MENU_CALLBACK,
    );
    
    $items['civi_documents/%ctools_js/delete/%'] = array(
        'title' => 'Delete Document',
        'page callback' => 'civihr_employee_portal_delete_document',
        'page arguments' => array(1, 3),
        'access callback' => TRUE,
        'type' => MENU_CALLBACK,
    );
    
    $items['civi_documents/%ctools_js/reminder/%'] = array(
        'title' => 'Send Reminder',
        'page callback' => 'civihr_employee_portal_send_reminder_document',
        'page arguments' => array(1, 3),
        'access callback' => TRUE,
        'type' => MENU_CALLBACK,
    );

    $items['civihr_contacts'] = array(
        'title' => 'Vacancy list',
        'page callback' => 'civihr_employee_portal_get_contact_list',
        'access callback' => TRUE,
        'type' => MENU_CALLBACK,
    );

    $items['absence_request/%ctools_js/debit'] = array(
        'page callback' => 'civihr_employee_portal_absence_request_callback',
        'page arguments' => array(1, 2),
        'access callback' => TRUE,
        'type' => MENU_CALLBACK,
    );

    $items['absence_request/%ctools_js/credit'] = array(
        'page callback' => 'civihr_employee_portal_absence_request_callback',
        'page arguments' => array(1, 2),
        'access callback' => TRUE,
        'type' => MENU_CALLBACK,
    );

    $items['absence_request/%ctools_js/credit_use'] = array(
        'page callback' => 'civihr_employee_portal_absence_request_callback',
        'page arguments' => array(1, 2),
        'access callback' => TRUE,
        'type' => MENU_CALLBACK,
    );

    $items['absence_request/%ctools_js/sick'] = array(
        'page callback' => 'civihr_employee_portal_absence_request_callback',
        'page arguments' => array(1, 2),
        'access callback' => TRUE,
        'type' => MENU_CALLBACK,
    );

    $items['absence_calendar/%ctools_js/show'] = array(
        'page callback' => 'civihr_employee_portal_absence_calendar_callback',
        'page arguments' => array(1),
        'access callback' => TRUE,
        'type' => MENU_CALLBACK,
    );

    $items['manager_approval/%ctools_js/pick_days'] = array(
        'page callback' => 'civihr_employee_portal_manager_approval_pick_days_callback',
        'page arguments' => array(1, 2, 3, 4, 5),
        'access callback' => TRUE,
        'type' => MENU_CALLBACK,
    );

    $items['manager_approval/%ctools_js/calendar/show'] = array(
        'page callback' => 'civihr_employee_portal_manager_approval_show_calendar_callback',
        'page arguments' => array(1),
        'access callback' => TRUE,
        'type' => MENU_CALLBACK,
    );

    $items['hr_resources/%ctools_js/resource/%'] = array(
        'page callback' => 'civihr_employee_portal_hr_resource_load_callback',
        'page arguments' => array(1, 3),
        'access callback' => TRUE,
        'type' => MENU_CALLBACK,
    );

    $items['my_details/%ctools_js/view'] = array(
        'page callback' => 'civihr_employee_portal_my_details_callback',
        'page arguments' => array(1),
        'access callback' => TRUE,
        'type' => MENU_CALLBACK,
    );

    $items['emergency_contacts/%ctools_js/view'] = array(
        'page callback' => 'civihr_employee_portal_emergency_contacts_callback',
        'page arguments' => array(1),
        'access callback' => TRUE,
        'type' => MENU_CALLBACK,
    );

    $items['civihr_reports'] = array(
        'title' => 'CiviHR reports',
        'page callback' => 'civihr_employee_portal_get_reports',
        'page arguments' => array(1, 2),
        'access callback' => TRUE,
        'type' => MENU_CALLBACK,
    );

    $items['hr-details'] = array(
        'title' => 'My Details',
        'page callback' => 'civihr_employee_portal_my_details',
        'access callback' => TRUE,
        'type' => MENU_NORMAL_ITEM,
        'menu_name' => 'main-menu',
        'weight' => 4
    );

    return $items;
}

/**
* Helper function to make a link.
*/
function civihr_employee_portal_make_link($link_text, $link_type = 'debit', $nid = '') {

    // Set a default value if no text in supplied.
    if (empty($link_text)) {
        $link_text = t('Modal');
    }

    if ($link_type == 'calendar') {
        return '' . l($link_text, 'absence_calendar/nojs/show', array('attributes' => array('class' => 'btn btn-custom ctools-use-modal ctools-modal-civihr-default-style'))) . '';
    }

    if ($link_type == 'leave_report') {
        return '' . l($link_text, 'print-leave-report/', array(
                                                                    'query' =>
                                                                        array('absence_start_date_period_filter' => $nid),
                                                                    'attributes' =>
                                                                        array('class' => 'btn btn-custom', 'target'=>'_blank')
                                                                    )
        ) . '';
    }

    if ($link_type == 'hr-resource') {
        return '' . l($link_text, 'hr_resources/nojs/resource/' . $nid, array('attributes' => array('class' => 'ctools-use-modal ctools-modal-civihr-default-style'))) . '';
    }
    
    if ($link_type == 'document') {
        return '' . l($link_text, 'civi_documents/nojs/edit/' . $nid, array('attributes' => array('class' => 'ctools-use-modal ctools-modal-civihr-default-style'))) . '';
    }

    return '' . l($link_text, 'absence_request/nojs/' . $link_type, array('attributes' => array('class' => 'btn btn-custom ctools-use-modal ctools-modal-civihr-default-style'))) . '';

}

/**
 * Absence calendar callback
 */
function civihr_employee_portal_absence_calendar_callback($ajax) {

    if ($ajax) {

        ctools_include('ajax');
        ctools_include('modal');

        drupal_add_js('misc/jquery.form.js');
        // Add the responder javascript, required by ctools
        ctools_add_js('ajax-responder');

        $output = array();
        $output[] = ctools_modal_command_display('Calendar view', views_embed_view('calendar_absence_list', 'page_1'));

        print ajax_render($output);
        drupal_exit();
    }
    else {
        return '';
    }

}

/**
 * Manager calendar / employee list callback
 */
function civihr_employee_portal_manager_approval_show_calendar_callback($ajax) {

    if ($ajax) {

        ctools_include('ajax');
        ctools_include('modal');

        drupal_add_js('misc/jquery.form.js');
        // Add the responder javascript, required by ctools
        ctools_add_js('ajax-responder');

        $block = module_invoke('civihr_employee_portal', 'block_view', 'manager_calendar');

        $output = array();
        $output[] = ctools_modal_command_display('Manager calendar view', render($block['content']));

        print ajax_render($output);
        drupal_exit();
    }
    else {
        return '';
    }

}

/**
 * HR resource modal display callback
 */
function civihr_employee_portal_hr_resource_load_callback($ajax, $nid) {

    if ($ajax) {

        // Get the node data, based on the passed NODE ID
        $node = node_load($nid);

        ctools_include('ajax');
        ctools_include('modal');

        drupal_add_js('misc/jquery.form.js');

        // Add the responder javascript, required by ctools
        ctools_add_js('ajax-responder');

        $output = array();

        // Get the view, filter by the passed NODE ID and Display
        $output[] = ctools_modal_command_display($node->title, views_embed_view('hr_documents', 'hr_resources_modal', array($nid)));

        print ajax_render($output);
        drupal_exit();
    }
    else {
        return '';
    }

}

/**
 * My details / Edit my details callback
 */
function civihr_employee_portal_my_details_callback($ajax) {

    if ($ajax) {

        ctools_include('ajax');
        ctools_include('modal');

        // Add the responder javascript, required by ctools
        ctools_add_js('ajax-responder');

        // Load the my details node - @TODO -> not hardcode node ID
        $node = node_load(2);
        $contents = render(node_view($node, 'full', NULL));

        $output = array();
        $output[] = ctools_modal_command_display(t('My Details'), render($contents));

        print ajax_render($output);
        drupal_exit();
    }
    else {
        return '';
    }

}

/**
 * My details / Edit emergency contacts callback
 */
function civihr_employee_portal_emergency_contacts_callback($ajax) {

    if ($ajax) {

        ctools_include('ajax');
        ctools_include('modal');

        // Add the responder javascript, required by ctools
        ctools_add_js('ajax-responder');

        // Load the emergency contacts node - @TODO -> not hardcode node ID
        $node = node_load(3);
        $contents = render(node_view($node, 'full', NULL));

        $output = array();
        $output[] = ctools_modal_command_display('Emergency contacts', render($contents));

        print ajax_render($output);
        drupal_exit();
    }
    else {
        return '';
    }

}

/**
 * Manager approval pick days callback function
 */
function civihr_employee_portal_manager_approval_pick_days_callback($ajax, $action = 'pick_days', $user = NULL, $main_absence_id = NULL, $activity_type_id = NULL) {

    if ($ajax) {
        ctools_include('ajax');
        ctools_include('modal');

        $title = t('Manager approval modal window');

        // Get the contact data (cached or from CIVI)
        $contact_data = get_civihr_contact_data($user);

        if ($action == 'pick_days') {
            $title = t('Approve leave for: ' . $contact_data['display_name']);
        }


        $form_state = array(
            'ajax' => TRUE,
            'is_ajax_update' => TRUE,
            'title' => $title,
            'action' => $action,
            'user_data' => $user,
            'main_absence_id' => $main_absence_id,
            'activity_type_id' => $activity_type_id
        );

        // Use ctools to generate ajax instructions for the browser to create a form in a modal popup.
        $output = ctools_modal_form_wrapper('civihr_employee_portal_manager_approval_pick_days_form', $form_state);

        // If the form has been submitted, there may be additional instructions such as dismissing the modal popup.
        if (!empty($form_state['executed'])) {

            drupal_add_js('misc/jquery.form.js');

            // Add the responder javascript, required by ctools
            ctools_add_js('ajax-responder');

            $output[] = ctools_modal_command_dismiss();
            $output[] = ctools_ajax_command_redirect('dashboard');

        }

        // Return the ajax instructions to the browser via ajax_render().
        print ajax_render($output);
        drupal_exit();

    }
    else {
        return drupal_get_form('civihr_employee_portal_manager_approval_pick_days_form');
    }

}

/**
 * Drupal form to be put in a modal (manager approval pick days form).
 */
function civihr_employee_portal_manager_approval_pick_days_form($form, $form_state) {

    // Civi init
    civicrm_initialize();

    // Get the main "absence" activity ID
    $activityTypes = CRM_Core_OptionGroup::values('activity_type', FALSE, FALSE, FALSE, NULL, 'name');
    $activityTypeId = CRM_Utils_Array::key('Absence', $activityTypes);

    $abesence_details = array(
        'source_record_id' => $form_state['main_absence_id'],
        'activity_type_id' => $activityTypeId,
    );

    $res = civicrm_api3('Activity', 'get', $abesence_details);
    $absence_details = $res['values'];

    // Get additional details about the main activity (staff notes and manager notes too)
    $additional_info = array(
        'sequential' => 1,
        'id' => $form_state['main_absence_id'],
        'api.CustomValue.get' => array('entity_id' => $form_state['main_absence_id']),
    );

    $res = civicrm_api3('Activity', 'get', $additional_info);
    $additional_info = array_shift($res['values']);

    // Set up array list for checkboxes with absence values
    $disputes = array();

    // Calculate the whole duration
    $all_duration = 0;

    // Build the checkbox table list from the child absence values
    foreach ($absence_details as $absence_value) {

        $duration = $absence_value['duration'] / (6 * 80);
        $all_duration += $duration;

        $disputes[$absence_value['id']] = array($absence_value['activity_date_time'], $duration, get_civihr_absence_statuses($absence_value['status_id']));

    }

    if ($all_duration <= 1) {

        // Show 1 date only
        $duration_date = $absence_details[key(array_slice($absence_details, -1, 1, TRUE))]['activity_date_time'];
        $day = t('day');
    }
    else {

        // Show start date and end date for the absence
        $duration_date = array_values($disputes)[0][0] . ' - ' .  $absence_details[key(array_slice($absence_details, -1, 1, TRUE))]['activity_date_time'];
        $day = t('days');
    }

    $header = array(t('Date'), t('Absence duration'), t('Absence status'));
    $absenceTypes = get_civihr_absence_types();

    foreach ($absenceTypes as $absenceType) {

        if (isset($absenceType['credit_activity_type_id']) && $absenceType['credit_activity_type_id'] == $form_state['activity_type_id']) {
            $leave_type = $absenceType['title'];
        }

        if (isset($absenceType['debit_activity_type_id']) && $absenceType['debit_activity_type_id'] == $form_state['activity_type_id']) {
            $leave_type = $absenceType['title'];
        }
    }

    $form['main_id'] = array(
        '#type'     => 'hidden',
        '#title' => 'Main absence ID',
        '#default_value' => $form_state['main_absence_id'],
    );

    $form['leave_type'] = array(
        '#markup' => '<div class="approval-leave-type"><b>' . t('Leave type:') . '</b> ' . $leave_type . '</div>',
    );

    $form['hidden_leave_type'] = array(
        '#type'     => 'hidden',
        '#title' => 'Leave type',
        '#default_value' => $leave_type,
    );

    // Start / End date of the absence duration
    $form['whole_duration'] = array(
        '#markup' => '<div class="whole-duration"><b>Date: </b>' . $duration_date . ' = ' . $all_duration . ' ' . $day . '</div>',
    );

    $form['hidden_whole_duration'] = array(
        '#type'     => 'hidden',
        '#title' => 'Duration and Date (showed in emails)',
        '#default_value' => $duration_date . ' = ' . $all_duration . ' ' . $day,
    );

    $form['pick_day_checkboxes'] = array(
        '#type' => 'tableselect',
        '#header' => $header,
        '#options' => $disputes,
        '#empty' => 'No users were found.'
    );

    // Output staff comments (if any)
    $form['staff_comments'] = array(
        '#markup' => '<div class="staff-comments"><div class="staff-notes-label"><b>' . t('Staff notes: ') . '</b></div>' . $additional_info['details'] . '</div>'
    );

    // api.CustomValue.get (show manager notes)
    $form['manager_notes'] = array(
        '#title' => t('Manager notes: '),
        '#type' => 'textarea',
        '#rows' => 2,
        '#description' => t('Additional manager notes. (These will be visible for staff!)'),
        '#default_value' => isset($additional_info['api.CustomValue.get']) ? $additional_info['api.CustomValue.get']['values'][0]['latest'] : '',
    );

    // This is a jquery button, which will be replaced onclick with the real Reject All form button (+it will show the manager comments form)
    $form['manager_actions'] = array(
        '#markup' => '<div id="manager-reject-all" class="form-submit btn btn-default">' . t('Reject all') . '</div>'
    );

    $form['reject_all'] = array(
        '#type' => 'submit',
        '#value' => t('Reject all'),
    );

    $form['approve_all'] = array(
        '#type' => 'submit',
        '#value' => t('Approve all'),
    );

    $form['approve_selected'] = array(
        '#type' => 'submit',
        '#value' => t('Approve selected'),
    );

    $form['#validate'][] = 'civihr_employee_portal_manager_approval_pick_days_form_validate';
    $form['#submit'][] = "civihr_employee_portal_manager_approval_pick_days_form_submit";

    return $form;

}

function civihr_employee_portal_manager_approval_pick_days_form_validate($form, &$form_state) {

    /*

    if (isset($form_state['values']['pick_day_checkboxes']) && $form_state['values']['pick_day_checkboxes'][1] == 0) {
        form_set_error('pick_day_checkboxes', t('Please select days to approve / reject'));
    }
     *
     */

    return TRUE;
}

function civihr_employee_portal_manager_approval_pick_days_form_submit($form, &$form_state) {

    // Current USER object
    global $user;

    // @TODO -> move to custom rules action (so it will be configurable through UI)
    if ($form_state['values']['op'] == 'Reject all') {
        if (isset($form_state['values']['pick_day_checkboxes'])) {

            // Civi init
            civicrm_initialize();

            foreach ($form_state['values']['pick_day_checkboxes'] as $act_key => $act_value) {

                $result = civicrm_api3('Activity', 'setvalue', array(
                    'id' => $act_key,
                    'field' => 'status_id',
                    'value' => 9
                ));

            }

            // Set the activity status
            $result = civicrm_api3('Activity', 'setvalue', array(
                'id' => $form_state['values']['main_id'],
                'field' => 'status_id',
                'value' => 9
            ));

            // Set the manager notes for the main absence ID
            $result = civicrm_api3('Activity', 'setvalue', array(
                'id' => $form_state['values']['main_id'],
                'field' => 'custom_34',
                'value' => $form_state['values']['manager_notes']
            ));

            $params = array(
                'contact_id' => $form_state['user_data'],
                'version' => 3,
                'sequential' => 1,
            );

            // Get the USER ID from the passed target contact ID
            $res = civicrm_api3('UFMatch', 'Get', $params);
            $contact_data = array_shift($res['values']);

            // Set the target user OBJECT
            $target_user = user_load($contact_data['uf_id']);

            // Get the manager notes
            $manager_notes = drupal_html_to_text(nl2br($form_state['values']['manager_notes']));

            // Get the leave type
            $leave_type = $form_state['values']['hidden_leave_type'];

            // Get the Start Date / End Date + duration of the leave
            $leave_date = $form_state['values']['hidden_whole_duration'];

            // Fire rules events
            rules_invoke_event('reject_all_post_event', $user, $target_user, $manager_notes, $leave_type, $leave_date);

        }

    }

    if ($form_state['values']['op'] == 'Approve all') {
        if (isset($form_state['values']['pick_day_checkboxes'])) {

            // Civi init
            civicrm_initialize();

            foreach ($form_state['values']['pick_day_checkboxes'] as $act_key => $act_value) {

                $result = civicrm_api3('Activity', 'setvalue', array(
                                                                    'id' => $act_key,
                                                                    'field' => 'status_id',
                                                                    'value' => 2
                                                               ));

            }

            $result = civicrm_api3('Activity', 'setvalue', array(
                                                                    'id' => $form_state['values']['main_id'],
                                                                    'field' => 'status_id',
                                                                    'value' => 2
                                                               ));

            drupal_set_message(t('Leave successfully approved for the whole duration'), 'success');
        }

    }

    if ($form_state['values']['op'] == 'Approve selected') {
        if (isset($form_state['values']['pick_day_checkboxes'])) {

            // Civi init
            civicrm_initialize();

            foreach ($form_state['values']['pick_day_checkboxes'] as $act_key => $act_value) {

                if ($act_key == $act_value) {
                    $result = civicrm_api3('Activity', 'setvalue', array(
                                                                        'id' => $act_key,
                                                                        'field' => 'status_id',
                                                                        'value' => 2
                                                                   ));
                }

            }

            $result = civicrm_api3('Activity', 'setvalue', array(
                                                                    'id' => $form_state['values']['main_id'],
                                                                    'field' => 'status_id',
                                                                    'value' => 2
                                                               ));

            drupal_set_message(t('Leave successfully approved for the selected days'), 'success');
        }

    }

}

/**
* Ajax menu callback.
*/
function civihr_employee_portal_absence_request_callback($ajax, $absence_type = 'debit') {

    if ($ajax) {
        ctools_include('ajax');
        ctools_include('modal');

        $title = t('Request leave');

        if ($absence_type == 'credit') {
            $title = t('Request TOIL');
        }

        if ($absence_type == 'credit_use') {
            $title = t('Use TOIL');
        }

        if ($absence_type == 'sick') {
            $title = t('Report new sickness');
        }

        $form_state = array(
            'ajax' => TRUE,
            'is_ajax_update' => TRUE,
            'title' => $title,
            'absence_type' => $absence_type,
        );

        // Since this will run again on form rebuild while still in the modal, prevent
        // form IDs from being incremented.
        // @todo https://drupal.org/node/1305882
        if (!empty($_POST['ajax_html_ids'])) {
            unset($_POST['ajax_html_ids']);
        }

        // Use ctools to generate ajax instructions for the browser to create
        // a form in a modal popup.
        $output = ctools_modal_form_wrapper('civihr_employee_portal_absence_request_form', $form_state);

        // If the form has been submitted, there may be additional instructions
        // such as dismissing the modal popup.
        if (!empty($form_state['executed'])) {

            drupal_add_js('misc/jquery.form.js');
            // Add the responder javascript, required by ctools
            ctools_add_js('ajax-responder');

            $output[] = ajax_command_replace('.messages', 'all good');
            $output[] = ctools_modal_command_dismiss();
            $output[] = ctools_ajax_command_redirect('dashboard');

        }

        // Return the ajax instructions to the browser via ajax_render().
        print ajax_render($output);
        drupal_exit();

    }

    else {
        return drupal_get_form('civihr_employee_portal_absence_request_form');
    }

}

/**
 * Drupal form to be put in a modal.
 */
function civihr_employee_portal_absence_request_form($form, $form_state) {

    $absence_type = 'debit';

    if (isset($form_state['absence_type']) && $form_state['absence_type'] != '') {
        $absence_type = $form_state['absence_type'];
    }

    // Javascript probably disabled - use the value from arg()
    else {
        $absence_type = arg(2);
    }

    $absenceTypes = get_civihr_absence_types();

    // Absence types select list
    $options = array();

    foreach ($absenceTypes as $absenceType) {

        if (isset($absenceType['id']) && $absenceType['is_active'] == 1) {

            // If credit type is allowed show credit types (only if the employee clicked -> Request TOIL)
            if ($absenceType['allow_credits'] == '1' && $absence_type == 'credit') {

                // Default credit types
                $options[$absenceType['credit_activity_type_id']] = $absenceType['title'] . ' (Credit)';

            }

            // If debit type is allowed show debit types (only if the employee clicked -> Request Leave)
            if ($absenceType['allow_debits'] == '1' && $absence_type == 'debit' && $absenceType['allow_credits'] !== '1' && $absenceType['title'] != 'Sick') {

                // Default debit types
                $options[$absenceType['debit_activity_type_id']] = $absenceType['title'];

            }

            // If Use TOIL is clicked show only debit types, which has credit type allowed too
            if ($absenceType['allow_debits'] == '1' && $absenceType['allow_credits'] == '1' && $absence_type == 'credit_use' && $absenceType['title'] != 'Sick') {

                // Default debit types which has credit type too
                $options[$absenceType['debit_activity_type_id']] = $absenceType['title'];

            }

            // If Report New Sickness is clicked, show the debit types which are selected as the Sickness Absence Type @TODO -> currently hardcoded based on absence title
            if ($absenceType['allow_debits'] == '1' && $absence_type == 'sick' && $absenceType['title'] == 'Sick') {

                // Default debit types which has credit type too
                $options[$absenceType['debit_activity_type_id']] = $absenceType['title'];

            }

        }
    }

    $form['absence_request_type'] = array(
        '#title' => t('Type:'),
        '#type' => 'select',
        '#options' => $options,
    );

    $form['absence_request_date_from'] = array(
        '#title' => t('From:'),
        '#type' => 'date_popup',
        '#required' => 'TRUE',
        '#date_format' => 'Y-m-d',
        '#date_year_range' => '-10:+10',
    );

    $form['absence_request_date_to'] = array(
        '#title' => t('To:'),
        '#type' => 'date_popup',
        '#required' => 'TRUE',
        '#ajax' => array(
            'callback'  => 'jms_industry_lens_form_ajax',
            'wrapper'   => 'absence-request-dates-selected',
            'event'   => 'change',
        ),
        '#date_format' => 'Y-m-d',
        '#date_year_range' => '-10:+10',
        '#prefix'   => '<div id="absence-request-from-date-selected">',
        '#suffix'=> '</div>'
    );

    $form['absence_request_dates_selected'] = array(
        '#type'     => 'fieldset',
        '#title'    => t('Selected dates'),
        '#markup' => '',
        '#collapsible' => TRUE,
        '#collapsed' => FALSE,
        '#prefix'   => '<div id="absence-request-dates-selected">',
        '#suffix'=> '</div>'
    );

    $form['absence_request_dates_selected']['dates_counter'] = array(
        '#type'     => 'hidden',
        '#title' => 'Counter',
        '#default_value' => 'null',
    );

    if (isset($form_state['values']['absence_request_date_from'])) {

        $from = $form_state['values']['absence_request_date_from'];
        $to = $form_state['values']['absence_request_date_to'];
        $i = 0;

        while ($from <= $to) {

            $form['absence_request_dates_selected']['_requested_day_' . $i] = array(
                '#type'     => 'select',
                '#title' => $from,
                '#options' => array('480' => t('All day'), '240' => t('Half day')),
            );

            $from = strtotime($from);
            $from = $from + (60 * 60 * 24);
            $from = date('Y-m-d', $from);

            $i++;

        }

    }

    $form['absence_type'] = array(
        '#type' => 'hidden',
        '#value' => $absence_type,
    );

    $form['details'] = array(
        '#type' => 'textarea',
        '#title' => t('Details:'),
        '#rows' => 10,
        '#cols' => 100,
    );

    $form['#validate'][] = 'civihr_employee_portal_absence_request_form_validate';
    $form['#submit'][] = "civihr_employee_portal_absence_request_form_submit";

    $form['submit'] = array(
        '#type' => 'submit',
        '#value' => t('Submit'),
    );

    return $form;
}

/**
 * Ajax callback to change the rendered industry lens taxonomy term
 */
function jms_industry_lens_form_ajax(&$form, &$form_state) {

    $form['absence_request_dates_selected']['#title'] = t('Dates selected:') . ' ' . $form_state['values']['absence_request_date_from'] . " - " . $form_state['values']['absence_request_date_to'];

    $from = $form_state['values']['absence_request_date_from'];
    $to = $form_state['values']['absence_request_date_to'];
    $i = 0;

    while ($from <= $to) {

        $from = strtotime($from);
        $from = $from + (60 * 60 * 24);
        $from = date('Y-m-d', $from);

        $i++;

    }

    $form['absence_request_dates_selected']['dates_counter']['#value'] = $i;


    return $form['absence_request_dates_selected'];
}

function civihr_employee_portal_absence_request_form_validate($form, &$form_state) {

    if (isset($form_state['values']['absence_request_date_from']) && isset($form_state['values']['absence_request_date_to'])) {

        if ($form_state['values']['absence_request_date_to'] < $form_state['values']['absence_request_date_from'])
        form_set_error('absence_request_date_to', t('End date must be bigger than the start date!'));
    }

    if (isset($form_state['values']['details']) && $form_state['values']['details'] == '') {
        form_set_error('details', t('Please fill in absence details text'));
    }

    return TRUE;
}

function civihr_employee_portal_absence_request_form_submit($form, &$form_state) {

    global $user;

    // Set absence type
    $absence_main_type = 'debit';

    if (isset($form_state['values']['absence_type']) && $form_state['values']['absence_type'] != '') {
        $absence_main_type = $form_state['values']['absence_type'];
    }

    // Set absence details
    $absence_details = '';

    if (isset($form_state['values']['details']) && $form_state['values']['details'] != '') {
        $absence_details = drupal_html_to_text(nl2br($form_state['values']['details']));
    }

    // Get the absence types
    $absenceTypes = get_civihr_absence_types();

    // Get leave Type
    foreach ($absenceTypes as $absenceType) {

        if (isset($absenceType['credit_activity_type_id']) && $absenceType['credit_activity_type_id'] == $form_state['values']['absence_request_type']) {
            $leave_type = $absenceType['title'];
        }

        if (isset($absenceType['debit_activity_type_id']) && $absenceType['debit_activity_type_id'] == $form_state['values']['absence_request_type']) {
            $leave_type = $absenceType['title'];
        }
    }

    // Send the form submitted values
    $form_object = (object) $form_state['values'];

    $whole_duration = 0;

    // Calculate the leave whole duration
    foreach ($form_state['values'] as $s_key => $form_s_val) {

        if (strpos($s_key, '_requested_day_') !== false) {
            $whole_duration += $form_s_val;
        }
    }

    // Get the leave_date
    if (isset($form_state['values']) && $form_state['values']['dates_counter'] != '1') {
        $absence_date = $form_state['values']['absence_request_date_from'] . ' - ' . $form_state['values']['absence_request_date_to'];
        $day = t('days');
    }
    else {
        $absence_date = $form_state['values']['absence_request_date_from'];
        $day = t('day');
    }

    // Build the leave date string
    $leave_date = $absence_date . ' = ' . $whole_duration / (6 * 80) . ' ' . $day;

    // Fire rules events
    rules_invoke_event('absence_request_add', $user, $absence_main_type, $absence_details, $form_object, $leave_type, $leave_date);

}

/**
 * Returns the entitlements from CiviCRM in json format
 * The json response will be cached in local file when the VIEWS requests to load data from this endpoint
 */
function civihr_employee_portal_get_absence_entitlement() {

    watchdog('not cached entitlement list', 'test');

    // Build the query
    $query = db_select('civicrm_hrabsence_entitlement', 'che')
        ->fields('che', array('contact_id', 'period_id'))
        ->fields('cufm', array('uf_id'))
        ->orderBy('che.contact_id');

    $query->join('civicrm_uf_match', 'cufm', 'cufm.contact_id = che.contact_id');

    // Add the group by
    $query->groupBy('che.contact_id, che.period_id');

    // Add the concat
    $query->addExpression("CONCAT_WS('||', GROUP_CONCAT(amount SEPARATOR '@@'), GROUP_CONCAT(type_id SEPARATOR '@@'))", "entitlement_type");

    $result = $query->execute();

    // Loop and prepare the array
    while($record = $result->fetchAssoc()) {
        $result_output['data'][] = $record;
    }

    // Output json
    drupal_json_output($result_output);
    drupal_exit();
}

/**
 * Returns the vacancy list from CiviCRM in json format
 * The json response will be cached in local file when the VIEWS requests to load data from this endpoint
 */
function civihr_employee_portal_get_vacancy_list() {

    watchdog('not cached vacancy list', 'test');

    $result_output = civicrm_api3('HRVacancy', 'get', array(
        'sequential' => 1,
        'status_id' => 2, // Only open Vacancies
        'return' => "id,start_date,end_date,status_id,description,position,salary,location",
    ));

    // Output json
    drupal_json_output($result_output);
    drupal_exit();

}

/**
 * Returns the document list
 */
function civihr_employee_portal_get_document_list() {

    global $user;
    $contactId = get_civihr_uf_match_data($user->uid)['contact_id'];
    
    $result_output = civicrm_api3('Document', 'get', array(
        'sequential' => 1,
        'target_contact_id' => $contactId,
        'is_deleted' => 0,
    ));

    // Output json
    drupal_json_output($result_output);
    drupal_exit();
}

/**
 * Returns the document list for Manager
 */
function civihr_employee_portal_get_document_list_manager() {

    global $user;
    $contactId = get_civihr_uf_match_data($user->uid)['contact_id'];
    
    $result_output = civicrm_api3('Document', 'get', array(
        'sequential' => 1,
        'assignee_contact_id' => $contactId,
        'is_deleted' => 0,
    ));
    
    // Output json
    drupal_json_output($result_output);
    drupal_exit();
}

/**
* Ajax menu callback.
*/
function civihr_employee_portal_edit_document($ajax, $id) {

    if ($ajax) {
        ctools_include('ajax');
        ctools_include('modal');

        $title = t('Upload Document');

        $form_state = array(
            'ajax' => TRUE,
            'is_ajax_update' => TRUE,
            'title' => $title,
            'id' => $id,
        );

        // Since this will run again on form rebuild while still in the modal, prevent
        // form IDs from being incremented.
        // @todo https://drupal.org/node/1305882
        if (!empty($_POST['ajax_html_ids'])) {
            unset($_POST['ajax_html_ids']);
        }

        // Use ctools to generate ajax instructions for the browser to create
        // a form in a modal popup.
        $output = ctools_modal_form_wrapper('civihr_employee_portal_document_form', $form_state);

        // If the form has been submitted, there may be additional instructions
        // such as dismissing the modal popup.
        if (!empty($form_state['executed'])) {

            drupal_add_js('misc/jquery.form.js');
            // Add the responder javascript, required by ctools
            ctools_add_js('ajax-responder');

            $output[] = ajax_command_replace('.messages', 'all good');
            $output[] = ctools_modal_command_dismiss();
            $output[] = ctools_ajax_command_redirect('dashboard');

        }

        // Return the ajax instructions to the browser via ajax_render().
        print ajax_render($output);
        drupal_exit();

    }

    else {
        return drupal_get_form('civihr_employee_portal_document_form');
    }

}

/**
 * Custom Document dashboard block form.
 */
function civihr_employee_portal_document_form($form, &$form_state) {

    $activityOptions = array();
    $typeResult = civicrm_api3('Activity', 'getoptions', array(
        'field' => "activity_type_id",
    ));
    $activityOptions['type'] = $typeResult['values'];
    
    $result = civicrm_api3('Document', 'get', array(
        'sequential' => 1,
        'id' => $form_state['id'],
    ));
    $document = CRM_Utils_Array::first($result['values']);

    $files = CRM_Tasksassignments_Page_Files::fileList(
        array(
            'entityTable' => 'civicrm_activity',
            'entityID' => $document['id'],
        )
    );
    //$files = array();
    
    $form['#prefix'] = '<article class="node node-webform contextual-links-region clearfix"><div class="content">';
    $form['#suffix'] = '</div></article>';
    
    $form['id'] = array(
        '#type' => 'hidden',
        '#value' => $document['id'],
    );

    $form['document_type'] = array(
        '#type' => 'textfield',
        '#title' => t('Document type'),
        '#prefix' => '<div class="row"><div class="col-md-12">',
        '#suffix' => '</div></div>',
        '#attributes' => array('readonly' => 'readonly'),
        '#attributes' => array('disabled' => 'disabled'),
        '#default_value' => $activityOptions['type'][$document['activity_type_id']],
    );
    
    $form['files'] = array(
        '#type' => 'plupload',
        '#title' => 'Files',
        '#prefix' => '<div class="row"><div class="col-md-12"><div class="well drop-zone" id="drop-target">Drop document(s) here</div>',
        '#suffix' => '<div id="notsupported">Your browser doesn\'t support multiupload feature.</div>
            <div>
                <table class="table table-condensed table-upload">
                    <colgroup>
                            <col class="col-index">
                            <col class="col-name">
                            <col class="col-size">
                            <col class="col-status">
                            <col class="col-action">
                    </colgroup>
                    <thead>
                        <tr>
                            <th>#</th>
                            <th>Name</th>
                            <th>Size</th>
                            <th>Progress</th>
                            <th></th>
                        </tr>
                    </thead>
                    <tbody id="filelist">
                    </tbody>
                </table>
            </div>
            <br />
            <div id="container">
                <a id="pickfiles" href="javascript:;">[Select files]</a> 
                <a id="uploadfiles" href="javascript:;">[Upload files]</a>
            </div>
            <br />
            <pre id="console"></pre>
            <script>
            CRM.$(document).trigger("uploaderFormReady", {id: ' . $document['id'] . ', formId: "civihr-employee-portal-document-form", files:' . json_encode($files) . '});
            </script>
        </div></div>',
    );
    
    $form['expire_date'] = array(
        '#type' => 'date_popup',
        '#title' => t('Expiry date:'),
        '#prefix' => '<div class="row"><div class="col-md-12">',
        '#suffix' => '</div></div>',
        '#date_format' => 'Y-m-d',
        '#date_year_range' => '-10:+10',
        '#default_value' => $document['expire_date'],
    );
    
    $form['details'] = array(
        '#type' => 'textarea',
        '#title' => t('Notes'),
        '#prefix' => '<div class="row"><div class="col-md-12">',
        '#suffix' => '</div></div>',
        '#rows' => 10,
        '#cols' => 100,
        '#default_value' => strip_tags($document['details']),
    );
    
    $form['delete_files'] = array(
        '#type' => 'hidden',
        //'#tree' => TRUE,
    );

    $form['save'] = array(
        '#type' => 'submit',
        '#value' => t('Save')
    );

    // Add the validation function
    $form['#validate'][] = 'civihr_employee_portal_document_form_validate';

    // Add the submit function
    $form['#submit'][] = 'civihr_employee_portal_document_form_submit';

    return $form;
}

function civihr_employee_portal_document_form_validate($form, &$form_state) {

    if ($form_state['values']['details'] == '') {
        form_set_error('display_name', 'Details cannot be blank!');
    }
}

function civihr_employee_portal_document_form_submit($form, &$form_state) {
    
    $id = $form_state['values']['id'];
    $expireDate = $form_state['values']['expire_date'];
    $details = strip_tags($form_state['values']['details']);
    
    $result = civicrm_api3('Document', 'create', array(
        'sequential' => 1,
        'id' => $id,
        'expire_date' => $expireDate,
        'details' => $details,
    ));

    $deleteFiles = json_decode($form_state['values']['delete_files'], true);
    if (!empty($deleteFiles)) {
        foreach ($deleteFiles as $deleteFile) {
            $result = CRM_Tasksassignments_Page_Files::fileDelete(
                array(
                    'fileID' => (int)$deleteFile['id'],
                    'entityTable' => 'civicrm_activity',
                    'entityID' => $form_state['values']['id'],
                )
            );
        }
    }
    
    drupal_set_message(t('Document changes has been saved.'), 'success');
}

/**
* Ajax menu callback.
*/
function civihr_employee_portal_delete_document($ajax, $id) {

    if ($ajax) {
        ctools_include('ajax');
        ctools_include('modal');

        $title = t('Are you sure you want to delete this Document?');

        $form_state = array(
            'ajax' => TRUE,
            'is_ajax_update' => TRUE,
            'title' => $title,
            'id' => $id,
        );

        // Since this will run again on form rebuild while still in the modal, prevent
        // form IDs from being incremented.
        // @todo https://drupal.org/node/1305882
        if (!empty($_POST['ajax_html_ids'])) {
            unset($_POST['ajax_html_ids']);
        }

        // Use ctools to generate ajax instructions for the browser to create
        // a form in a modal popup.
        $output = ctools_modal_form_wrapper('civihr_employee_portal_document_form_delete_confirm', $form_state);

        // If the form has been submitted, there may be additional instructions
        // such as dismissing the modal popup.
        if (!empty($form_state['executed'])) {

            drupal_add_js('misc/jquery.form.js');
            // Add the responder javascript, required by ctools
            ctools_add_js('ajax-responder');

            $output[] = ajax_command_replace('.messages', 'all good');
            $output[] = ctools_modal_command_dismiss();
            $output[] = ctools_ajax_command_redirect('dashboard');

        }

        // Return the ajax instructions to the browser via ajax_render().
        print ajax_render($output);
        drupal_exit();

    }

    else {
        return drupal_get_form('civihr_employee_portal_document_form_delete_confirm');
    }

}

function civihr_employee_portal_document_form_delete_confirm($form, &$form_state){
    
    $form['id'] = array(
        '#type' => 'hidden',
        '#value' =>  $form_state['id'],
        '#suffix' => "<script>CRM.$('#edit-cancel').bind('click', function() { Drupal.CTools.Modal.dismiss(); return false; });</script>",
    );
    
    $form['#submit'][] = 'civihr_employee_portal_document_form_delete_submit';
    
    return confirm_form($form, 
        t('Are you sure you want to delete this Document?'),
        'dashboard',
        t('This action cannot be undone from here.'), 
        t('Delete'), 
        t('Cancel'));
}

function civihr_employee_portal_document_form_delete_submit($form, &$form_state) {
    
    $id = (int)$form_state['values']['id'];
    
    $result = civicrm_api3('Document', 'create', array(
        'sequential' => 1,
        'id' => $id,
        'is_deleted' => 1,
    ));
    
    drupal_set_message(t('Document has been deleted.'), 'success');
}

/**
* Ajax menu callback.
*/
function civihr_employee_portal_send_reminder_document($ajax, $id) {

    if ($ajax) {
        ctools_include('ajax');
        ctools_include('modal');

        $title = t('Send Reminder');

        $form_state = array(
            'ajax' => TRUE,
            'is_ajax_update' => TRUE,
            'title' => $title,
            'id' => $id,
        );

        // Since this will run again on form rebuild while still in the modal, prevent
        // form IDs from being incremented.
        // @todo https://drupal.org/node/1305882
        if (!empty($_POST['ajax_html_ids'])) {
            unset($_POST['ajax_html_ids']);
        }

        // Use ctools to generate ajax instructions for the browser to create
        // a form in a modal popup.
        $output = ctools_modal_form_wrapper('civihr_employee_portal_document_form_send_reminder', $form_state);

        // If the form has been submitted, there may be additional instructions
        // such as dismissing the modal popup.
        if (!empty($form_state['executed'])) {

            drupal_add_js('misc/jquery.form.js');
            // Add the responder javascript, required by ctools
            ctools_add_js('ajax-responder');

            $output[] = ajax_command_replace('.messages', 'all good');
            $output[] = ctools_modal_command_dismiss();
            $output[] = ctools_ajax_command_redirect('dashboard');

        }

        // Return the ajax instructions to the browser via ajax_render().
        print ajax_render($output);
        drupal_exit();

    }

    else {
        return drupal_get_form('civihr_employee_portal_document_form_delete_confirm');
    }

}

function civihr_employee_portal_document_form_send_reminder($form, &$form_state){
    
    $activityOptions = array();
    $typeResult = civicrm_api3('Activity', 'getoptions', array(
        'field' => "activity_type_id",
    ));
    $activityOptions['type'] = $typeResult['values'];
    
    $documentResult = civicrm_api3('Document', 'get', array(
        'sequential' => 1,
        'id' => $form_state['id'],
    ));
    $document = CRM_Utils_Array::first($documentResult['values']);
    
    $activityContactResult = civicrm_api3('ActivityContact', 'get', array(
        'sequential' => 1,
        'activity_id' => $form_state['id'],
        'record_type_id' => 1,
    ));
    $activityContacts = array();
    foreach ($activityContactResult['values'] as $activityContact) {
        $contactResult = civicrm_api3('Contact', 'get', array(
            'sequential' => 1,
            'id' => $activityContact['contact_id'],
        ));
        $contact = CRM_Utils_Array::first($contactResult['values']);
        $activityContacts[] = $contact['sort_name'];
    }
    
    $form['id'] = array(
        '#type' => 'hidden',
        '#value' =>  $form_state['id'],
    );
    
    $form['document'] = array(
        '#type' => 'textfield',
        '#title' => t('Document'),
        '#prefix' => '<div class="row"><div class="col-md-12">',
        '#suffix' => '</div></div>',
        '#attributes' => array('readonly' => 'readonly'),
        '#attributes' => array('disabled' => 'disabled'),
        '#value' => $activityOptions['type'][$document['activity_type_id']],
    );
    
    $form['due'] = array(
        '#type' => 'textfield',
        '#title' => t('Due'),
        '#prefix' => '<div class="row"><div class="col-md-12">',
        '#suffix' => '</div></div>',
        '#attributes' => array('readonly' => 'readonly'),
        '#attributes' => array('disabled' => 'disabled'),
        '#value' => $document['activity_date_time'],
    );
    
    $form['assignee'] = array(
        '#type' => 'textfield',
        '#title' => t('Assignee'),
        '#prefix' => '<div class="row"><div class="col-md-12">',
        '#suffix' => '</div></div>',
        '#attributes' => array('readonly' => 'readonly'),
        '#attributes' => array('disabled' => 'disabled'),
        '#value' => implode(', ', $activityContacts),
    );
    
    $form['notes'] = array(
        '#type' => 'textarea',
        '#title' => t('Notes'),
        '#rows' => 10,
        '#cols' => 100,
        '#prefix' => '<div class="row"><div class="col-md-12">',
        '#suffix' => '</div></div>',
        '#default_value' => '',
    );
    
    $form['submit'] = array(
        '#type' => 'submit',
        '#value' => t('Send'),
        '#prefix' => '<hr>',
    );
    
    $form['#submit'][] = 'civihr_employee_portal_document_form_send_reminder_submit';
    
    return $form;
}

function civihr_employee_portal_document_form_send_reminder_submit($form, &$form_state) {
    
    $id = (int)$form_state['values']['id'];
    $notes = $form_state['values']['notes'];
    
    $result = civicrm_api3('Document', 'sendreminder', array(
        'sequential' => 1,
        'activity_id' => $id,
        'notes' => $notes,
    ));
    
    drupal_set_message(t('Reminder has been sent.'), 'success');
}

/**
 * Returns the contact list from CiviCRM in json format
 * The json response will be cached in local file when the VIEWS requests to load data from this endpoint
 */
function civihr_employee_portal_get_contact_list() {

    watchdog('not cached contact list', 'test1');

    $result_contacts = civicrm_api3('Contact', 'get', array(
        'sequential' => 1,
        'options' => array(
            'limit' => 10000000,
        ),

        'return' => "contact_id,display_name,email,phone,contact_type",
    ));

    $result_contracts = civicrm_api3('HRJobContract', 'get', array(
        'sequential' => 1,
        'options' => array(
            'limit' => 10000000,
        ),
        'return' => 'is_primary,title,location,contract_type,period_type,contact_id'
    ));

    // Merge contacts with contracts (if contract doesn't exist still return the contact data)
    $merged_output = HelperClass::array_merge_callback($result_contacts['values'], $result_contracts['values'], function ($contact_array, $job_contract_array) {

        // Merge only for the primary contracts
        if ($job_contract_array['is_primary'] == 1) {
            return $contact_array['contact_id'] == $job_contract_array['contact_id'];
        }
    });

    // Build the results
    $result_output = Array();
    $result_output['values'] = $merged_output;

    // Output json results
    drupal_json_output($result_output);
    drupal_exit();

}

/**
 * Implements hook_block_info().
 */
function civihr_employee_portal_block_info() {

    // Call the Base class
    $blocks = new Base;

    // Generate the block and return
    return $blocks->generateBlockInfo();

}

/**
 * Implements hook_block_view().
 */
function civihr_employee_portal_block_view($delta = '') {

    $blocktypes = Base::returnBlockTypes();

    if (array_key_exists($delta, $blocktypes)) {
        $block = array();

        $block['subject'] = $blocktypes[$delta]['title'];
        $block['content'] = _civihr_employee_portal_block_generate_content($blocktypes[$delta]['class_name']);

        return $block;
    }

}

/**
 * Block content generated based on Block class
 */
function _civihr_employee_portal_block_generate_content($class_name = '') {

    $class_name = 'Drupal\civihr_employee_portal\Blocks' . '\\' . $class_name;

    $block = new $class_name;

    return $block->generateBlock();
}

/**
 * Implements hook_schema_alter().
 */
function civihr_employee_portal_schema_alter(&$schema) {

    $schema['absence_list']['description'] = 'Views data associated with absence_list';
    $schema['absence_list']['fields']['id'] = array(
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'description' => 'Activity ID.',
    );
    $schema['absence_list']['fields']['absence_title'] = array(
        'type' => 'varchar',
        'length' => 200,
        'not null' => TRUE,
        'description' => 'Activity Title.',
    );
    $schema['absence_list']['fields']['drupal_uid'] = array(
        'type' => 'int',
        'not null' => TRUE,
        'description' => 'Drupal User ID.',
    );
    $schema['absence_list']['fields']['duration'] = array(
        'type' => 'int',
        'not null' => TRUE,
        'description' => 'Absence duration.',
    );
    $schema['absence_list']['fields']['activity_type_id'] = array(
        'type' => 'int',
        'not null' => TRUE,
        'description' => 'Absence type ID.',
    );
    $schema['absence_list']['fields']['is_credit'] = array(
        'type' => 'int',
        'not null' => TRUE,
        'description' => 'Absence activity (Is Credit type?)',
    );
    $schema['absence_list']['fields']['absence_start_date_timestamp'] = array(
        'type' => 'varchar',
        'mysql_type' => 'DATETIME',
        'not null' => FALSE,
        'description' => 'Absence start date.',
    );
    $schema['absence_list']['fields']['absence_end_date_timestamp'] = array(
        'type' => 'varchar',
        'mysql_type' => 'DATETIME',
        'not null' => FALSE,
        'description' => 'Absence end date.',
    );
    $schema['absence_list']['fields']['details'] = array(
        'type' => 'text',
        'not null' => TRUE,
        'description' => 'Activity details text.',
    );

    $schema['absence_approval_list']['description'] = 'Views data associated with absence_approval_list';
    $schema['absence_approval_list']['fields']['id'] = array(
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'description' => 'Activity ID.',
    );
    $schema['absence_approval_list']['fields']['absence_title'] = array(
        'type' => 'varchar',
        'length' => 200,
        'not null' => TRUE,
        'description' => 'Activity Title.',
    );
    $schema['absence_approval_list']['fields']['drupal_uid'] = array(
        'type' => 'int',
        'not null' => TRUE,
        'description' => 'Drupal User ID.',
    );
    $schema['absence_approval_list']['fields']['employee_id'] = array(
        'type' => 'int',
        'not null' => TRUE,
        'description' => 'Employee ID.',
    );
    $schema['absence_approval_list']['fields']['duration'] = array(
        'type' => 'int',
        'not null' => TRUE,
        'description' => 'Absence duration.',
    );
    $schema['absence_approval_list']['fields']['activity_type_id'] = array(
        'type' => 'int',
        'not null' => TRUE,
        'description' => 'Absence type ID.',
    );
    $schema['absence_approval_list']['fields']['is_credit'] = array(
        'type' => 'int',
        'not null' => TRUE,
        'description' => 'Absence activity (Is Credit type?)',
    );
    $schema['absence_approval_list']['fields']['absence_start_date_timestamp'] = array(
        'type' => 'varchar',
        'mysql_type' => 'DATETIME',
        'not null' => FALSE,
        'description' => 'Absence start date.',
    );
    $schema['absence_approval_list']['fields']['absence_end_date_timestamp'] = array(
        'type' => 'varchar',
        'mysql_type' => 'DATETIME',
        'not null' => FALSE,
        'description' => 'Absence end date.',
    );


}

/**
 * Implements hook_entity_info().
 */
function civihr_employee_portal_entity_info() {
    $info = array();

    $info['civihr_absences'] = array(
        'label' => t('Absence entity'),
        'plural label' => t('Absences entity'),
        'description' => t('Absences entity definition.'),
        'entity class' => 'Entity',
        'controller class' => 'EntityAPIController',
        'views controller class' => 'EntityDefaultViewsController',
        'base table' => 'absence_list',
        'fieldable' => TRUE,
        'entity keys' => array(
            'id' => 'id',
            'label' => 'Entity Activity ID'
        ),
        'bundles' => array(),
        // Use the default label() and uri() functions
        'label callback' => 'entity_class_label',
        'uri callback' => 'entity_class_uri',
        // Entity API needs to know about your module for the views integration to work
        'module' => 'civihr_employee_portal',

    );

    $info['civihr_absence_approvals'] = array(
        'label' => t('Absence approval entity'),
        'plural label' => t('Absence approvals entity'),
        'description' => t('Absence approval entity for managers.'),
        'entity class' => 'Entity',
        'controller class' => 'EntityAPIController',
        'views controller class' => 'EntityDefaultViewsController',
        'base table' => 'absence_approval_list',
        'fieldable' => TRUE,
        'entity keys' => array(
            'id' => 'id',
            'label' => 'Entity Activity ID'
        ),
        'bundles' => array(),
        // Use the default label() and uri() functions
        'label callback' => 'entity_class_label',
        'uri callback' => 'entity_class_uri',
        // Entity API needs to know about your module for the views integration to work
        'module' => 'civihr_employee_portal',

    );

    return $info;
}

/**
 * Implements hook_views_api().
 */
function civihr_employee_portal_views_api() {
    return array(
        'api' => 3,
        'path' => drupal_get_path('module', 'civihr_employee_portal') . '/views',
        'template path' => drupal_get_path('module', 'civihr_employee_portal') . '/views/templates',
    );
}

/**
 * Implements hook_views_pre_render().
 * Adding required js for the modal window
 */
function civihr_employee_portal_views_pre_render(&$view) {

    if ($view->name == 'hr_documents') {

        if ($view->current_display == 'hr_resources') {

            ctools_include('modal');
            ctools_modal_add_js();

        }
    }
    
    //if ($view->name == 'Documents') {
    //}
}

/**
 * @param $view_name
 * @param string $view_display
 * Load view as html block
 */
function civihr_employee_portal_get_reports($view_name = FALSE, $view_display = 'default') {

    // Array for contextual filters
    $args = [];

    // Set the contextual filters (if any)
    if (isset($_GET['value'])) {
        $args[] = $_GET['value'];
    }

    // No view display the default reports page (reports dashboard)
    if (!$view_name) {

        // Load the reports page
        // Add the javascript library for D3
        drupal_add_js('http://d3js.org/d3.v3.min.js', 'external');
        drupal_add_js(drupal_get_path('module', 'civihr_employee_portal') . '/js/reports.js');

        return '<div id="custom-report"></div><div id="custom-report-details"></div><div id="relationship-report"></div>';

    }

    // Special handling if we paginate, or sort the view
    if (isset($_GET['order']) || isset($_GET['page']) || isset($_GET['sort']) || !isset($_GET['ajax'])) {

        // Load the reports page
        // Add the javascript library for D3
        drupal_add_js('http://d3js.org/d3.v3.min.js', 'external');
        drupal_add_js(drupal_get_path('module', 'civihr_employee_portal') . '/js/reports.js');

        // Load the view, set filters and display
        $view = views_get_view($view_name);
        $view->set_display($view_display);

        // Set the contextual filters from graph (passed in GET['value'])
        $view->set_arguments($args);

        $view->execute();

        // Set the view data to variable (and return later)
        $view_data =  $view->render();

        return '<div id="custom-report"></div><div id="custom-report-details">' . $view_data . '</div><div id="relationship-report"></div>';

    }
    else {

        // Reset ajax
        unset($_GET['ajax']);

        // When clicked on the graph load a specific view to display data under the graph
        $view = views_get_view($view_name);
        $view->set_display($view_display);

        // Set the contextual filters from graph (passed in GET['value'])
        $view->set_arguments($args);

        $view->execute();

        print $view->render();

    }

}

/**
 * Custom Staff Directory dashboard block form.
 */
function civihr_employee_portal_directory_block_form($form, &$form_state) {

    $form['display_name'] = array(
        '#type' => 'textfield',
        '#title' => t('Name'),
        '#attributes' => array('placeholder' => t('Enter name')),
        '#prefix' => '<div class="row"><div class="col-md-12">',
        '#suffix' => '</div>'
    );

    $form['job_title'] = array(
        '#type' => 'textfield',
        '#title' => t('Job title'),
        '#attributes' => array('placeholder' => t('Job title')),
        '#prefix' => '<div class="col-md-6">',
        '#suffix' => '</div>'
    );

    $form['phone'] = array(
        '#type' => 'textfield',
        '#title' => t('Phone'),
        '#attributes' => array('placeholder' => t('Phone')),
        '#prefix' => '<div class="col-md-6">',
        '#suffix' => '</div>'
    );

    $form['email_value'] = array(
        '#type' => 'textfield',
        '#title' => t('Email'),
        '#attributes' => array('placeholder' => t('Email')),
        '#prefix' => '<div class="col-md-12">',
        '#suffix' => '</div></div>'
    );

    $form['submit'] = array(
        '#type' => 'submit',
        '#value' => t('Go!'),
        '#prefix' => '<hr>'
    );

    // Add the validation function
    $form['#validate'][] = 'civihr_employee_portal_directory_block_form_validate';

    // Add the submit function
    $form['#submit'][] = 'civihr_employee_portal_directory_block_form_submit';

    return $form;
}

/**
 * Custom Staff Directory dashboard block form validate function.
 */
function civihr_employee_portal_directory_block_form_validate($form, &$form_state) {

    // No name selected, throw an error
    if ($form_state['values']['display_name'] == '') {
        form_set_error('display_name', 'Name cannot be blank!');
    }
}

/**
 * Custom Staff Directory dashboard block form submit function.
 */
function civihr_employee_portal_directory_block_form_submit($form, &$form_state) {

    // Redirect to the staff directory views list page passing parameters to filter the viewß
    drupal_goto('hr-staff-directory', array('query'=> array(
                                                        'display_name' => $form_state['values']['display_name'],
                                                        'job_title' => $form_state['values']['job_title'],
                                                        'phone' => $form_state['values']['phone'],
                                                        'email_value' => $form_state['values']['email_value'],

    )));
}

// Note: Under "Redirection location" NO redirect option should be select to get the confirmation message with ajax.
// We can use this trick to make it generic for all webforms those have No redirect settings enabled under "Redirection location" setting.
function civihr_employee_portal_form_alter(&$form, &$form_state, $form_id) {

    if ($form_id == 'user_login_block') {
        /*////if ($form_state['input']['forgot-password']) {
            exit('password reminder');
        }
        exit('standard login');
        array_unshift($form['#submit'], 'civihr_employee_portal_user_login_submit');
        //$form['#validate'][] = 'civihr_employee_portal_user_login_submit';
        //$form['#validate'] = array(
            //'civihr_employee_portal_user_login_submit',
        //);
        $form['name']['#required'] = false;
        $form['pass']['#required'] = false;*/
    }
    
    // Do ajax submit generic for all the webform those have no redirect option enabled.
    if(isset($form['#node']) && $form['#node']->webform['redirect_url'] == "<none>") {
        $matches = array();

        // Check whether the form id have nid at the end like _nid
        preg_match('/[\d]+$/', $form_id, $matches);
        $nid_match = $matches[0];

        if(strpos($form_id, 'webform_client_form_') !== false && !empty($nid_match)) {

            $form['actions']['submit'] = array(
                '#type' => 'submit',
                '#ajax' => array(
                    'callback' => 'webform_client_form_ajax_callback',
                    'wrapper' => str_replace('_','-',$form['#form_id']),
                    'effect' => 'fade',
                ),
                '#value' => t('Submit'),
            );
        }

    }
 }
 
 function civihr_employee_portal_preprocess_user_login(&$vars) {

    ctools_include('ajax');
    ctools_include('modal');

    drupal_add_js('misc/jquery.form.js');
    // Add the responder javascript, required by ctools
    ctools_add_js('modal');
    ctools_add_js('ajax-responder');

    $vars['form']['#block']->subject = null;
    $vars['form']['name']['#attributes']['placeholder'] = 'Username or email';
    $vars['form']['name']['#required'] = false;
    $vars['form']['pass']['#attributes']['placeholder'] = 'Password';
    $vars['form']['pass']['#required'] = false;
    //$vars['form']['#validate'] = array();
 }
 
 function civihr_employee_portal_user_login_submit(&$form, &$form_state) {
    ////exit('civihr_employee_portal_user_login_submit');
}

function webform_client_form_ajax_callback($form, &$form_state) {

    if (form_get_errors()) {
        return $form;
    }
    else {

        ctools_include('ajax');
        ctools_include('modal');
        ctools_add_js('ajax-responder');

        // Get the contact ID and create the cache identifier value
        $contact_value = 'civihr_contact_data_' . $_SESSION['CiviCRM']['userID'];

        $commands = array();

        $commands[] = ctools_modal_command_dismiss();
        $commands[] = ctools_ajax_command_redirect('dashboard');
        $commands[] = ajax_command_prepend('#content', '<div id="messages">' . theme('status_messages') . '</div>');

        // Try to remove the cached data for this contact as the values were updated
        cache_clear_all($contact_value, 'cache');

        print ajax_render($commands);

        exit;

    }

}

/**
 * Implement custom my details page, which loads the my details block, to edit the employee data
 */
function civihr_employee_portal_my_details() {

    ctools_include('modal');
    ctools_modal_add_js();

    // This will render the same block as on the dashboard page
    $block = module_invoke('civihr_employee_portal', 'block_view', 'my_details');

    return render($block['content']);
}

/**
 * @param $form
 * @param $form_state
 * Implement form_views_exposed_form_alter()
 */
function civihr_employee_portal_form_views_exposed_form_alter(&$form, &$form_state, $form_id) {

    // Show the open calendar button in the my leave block next to the date filters select list
    if (isset($form['#id']) && $form['#id'] == 'views-exposed-form-absence-list-page') {


        if (isset($_REQUEST['absence_start_date_period_filter'])) {
            $request_date = $_REQUEST['absence_start_date_period_filter'];
        }
        else {
            // Set default period
            $request_date = '1';
        }

        $form['open_calendar'] = array(
            '#markup' => civihr_employee_portal_make_link(t('Open calendar'), 'calendar')
        );

        $form['leave_report'] = array(
            '#markup' => civihr_employee_portal_make_link(t('Print leave report'), 'leave_report', $request_date),
            '#prefix' => '<div id="report-replace-div">',
            '#suffix' => '</div>',
        );

        // Replace the print leave report URL with the selected date period URL
        $form['absence_start_date_period_filter']['#ajax'] =
        array(
            'callback' => '_absence_start_date_period_change_submit',
            'wrapper' => 'report-replace-div',
            'method' => 'replace',
            'effect' => 'fade',
            'progress' => array('type' => 'none')
        );

        // Autosubmit the form after date_period select change
        $form['absence_start_date_period_filter']['#attributes'] = array('onchange' => "jQuery('#edit-submit-absence-list').click()");

    }

}

function _absence_start_date_period_change_submit(&$form, &$form_state) {

    if (isset($_REQUEST['absence_start_date_period_filter'])) {
        $request_date = $_REQUEST['absence_start_date_period_filter'];
    }
    else {
        // Set default period
        $request_date = '1';
    }

    $form['leave_report'] = array(
        '#markup' => civihr_employee_portal_make_link(t('Print leave report'), 'leave_report', $request_date),
        '#prefix' => '<div id="report-replace-div">',
        '#suffix' => '</div>',
    );

    return $form['leave_report'];

}

/**
 * Implement hook_preprocess_page
 * @param $vars
 */
function civihr_employee_portal_preprocess_page(&$vars) {

    global $user;

    $contact_data['display_name'] = t('Anonymus');

    // Set empty image URL
    $vars['image_url'] = '';

    if (isset($_SESSION['CiviCRM'])) {

        // Get the contact data
        $contact_data = get_civihr_contact_data($_SESSION['CiviCRM']['userID']);

        if (isset($contact_data['image_URL']) && !empty($contact_data['image_URL'])) {

            // Set the profile image URL
            $vars['image_url'] = $contact_data['image_URL'];

        }

    }

    // This values will be used in the template by Drupal
    $vars['user_name'] = $contact_data['display_name'];
    $vars['edit_account'] = l('<i class="fa fa-edit"></i>' . t('Edit Account'), 'user/' . $user->uid . '/edit', array('html' => true));
    $vars['logout_link'] = l('<i class="fa fa-sign-out"></i>' . t('Log Out'), 'user/logout', array('html' => true));

}

/**
 * Implements hook_token_info().
 */
function civihr_employee_portal_token_info() {

    $info = array();

    // Define any custom tokens.
    $info['tokens']['user']['contact_display_name'] = array(
        'name' => t('CiviCRM Contact Display Name'),
        'description' => t('CiviCRM Display Name from the contact record.'),
    );

    $info['tokens']['user']['contact_phone'] = array(
        'name' => t('CiviCRM Contact Phone'),
        'description' => t('CiviCRM Contact Phone from the contact record.'),
    );


    $info['tokens']['user']['assigned_manager_name'] = array(
        'name' => t('Assigned manager name'),
        'description' => t('Full Name of the assigned manager.'),
    );

    $info['tokens']['user']['assigned_manager_phone'] = array(
        'name' => t('Assigned manager phone'),
        'description' => t('Phone of the assigned manager.'),
    );

    $info['tokens']['user']['assigned_manager_email'] = array(
        'name' => t('Assigned manager email address'),
        'description' => t('Email Address of the assigned manager.'),
    );

    return $info;
}

/**
 * Implements hook_tokens().
 */
function civihr_employee_portal_tokens($type, $tokens, array $data = array(), array $options = array()) {
    $replacements = array();

    if ($type == 'user') {

        // Get the assigned manager contact IDs for the passed USER object
        if (isset($data['user']) && $data['user']->uid != '') {

            $managers = HelperClass::_get_contact_manager_contact_id($data['user']->uid);
            $user_contact_data = get_civihr_contact_data(NULL, $data['user']->uid);

        }

        // Get the details for the manager
        $assigned_manager_contact_data = get_civihr_contact_data($managers[0]);

        // Loop through the available tokens.
        foreach ($tokens as $name => $original) {
            // Find our custom tokens by name.
            switch ($name) {

                case 'contact_display_name':

                    // Find the contact display name.
                    $value = '';

                    if (isset($user_contact_data) && $user_contact_data['display_name'] != '') {
                        $value = $user_contact_data['display_name'];
                    }

                    // Set the token values!
                    $replacements[$original] = $value;
                    break;
                case 'contact_phone':

                    // Find the contact phone number.
                    $value = '';

                    if (isset($user_contact_data) && $user_contact_data['phone'] != '') {
                        $value = $user_contact_data['phone'];
                    }

                    // Set the token values!
                    $replacements[$original] = $value;
                    break;

                case 'assigned_manager_name':

                    // Find the assigned manager name.
                    $value = '';

                    if (isset($assigned_manager_contact_data) && $assigned_manager_contact_data['display_name'] != '') {
                        $value = $assigned_manager_contact_data['display_name'];
                    }

                    // Set the token values!
                    $replacements[$original] = $value;
                    break;

                case 'assigned_manager_phone':

                    // Find the assigned manager phone.
                    $value = '';

                    if (isset($assigned_manager_contact_data) && $assigned_manager_contact_data['phone'] != '') {
                        $value = $assigned_manager_contact_data['phone'];
                    }

                    // Set the token values!
                    $replacements[$original] = $value;
                    break;

                case 'assigned_manager_email':

                    // Find the assigned manager email address.
                    $value = '';

                    if (isset($assigned_manager_contact_data) && $assigned_manager_contact_data['email'] != '') {
                        $value = $assigned_manager_contact_data['email'];
                    }

                    // Set the token values!
                    $replacements[$original] = $value;
                    break;
            }
        }
    }

    return $replacements;
}